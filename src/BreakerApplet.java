/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package src;

import src.bricks.Brick;
import src.bricks.BrickList;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.util.Random;
import src.bricks.DuplicateBrick;
import src.bricks.MissileBrick;

/**
 * @author Quinn, Andrew
 */
public class BreakerApplet extends java.applet.Applet implements java.awt.event.ActionListener {

    private static final int PAUSE_TIME = 20;
    private static final int HEIGHT = 700;
    private static final int WIDTH = 500;
    private javax.swing.Timer moveTimer = new javax.swing.Timer(5, this);
    private BrickList brickList;
    private PFigureList figList;
    private Ball ball;
    private Paddle paddle;

    @Override
    public void init() {
        Window window = (Window) this.getParent().getParent();
        window.setSize(WIDTH, HEIGHT + 100);
        window.setLocationRelativeTo(null);

        try {
            java.awt.EventQueue.invokeAndWait(new Runnable() {
                public void run() {
                    initComponents();
                    setStage();
                    moveTimer.start();
                    panel.requestFocus();
                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        setLayout(new BorderLayout());
    }

    private boolean gameIsOver() {
        //Out of bounds?

        return false;
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        panel.paint(g);
    }

    private void setStage() {
        panel.setSize(WIDTH, HEIGHT);
        brickList = new BrickList();
        figList = new PFigureList();

        Random rand = new Random();
        for (int i = 0; i <= 10; i++) {
            for (int j = 1; j <= 10; j++) {
                Brick brick;
                int num = rand.nextInt();

                if (num % 15 == 0) {
                    brick = new MissileBrick(i * 50, j * 40, 50, 20, 0, panel);
                } else if (num % 15 == 5) {
                    brick = new DuplicateBrick(i * 50, j * 40, 50, 20, 0, panel);
                } else {
                    brick = new Brick(i * 50, j * 40, 50, 20, 0, panel);
                }

                brickList.add(brick);
            }
        }

        figList.add(new Ball((WIDTH - 10) / 2, HEIGHT - 75, 2, -2, Color.RED, 10, panel));
        paddle = new Paddle((WIDTH - 100) / 2, HEIGHT - 50, 100, 20, 0, panel);
    }

    @Override
    public void actionPerformed(ActionEvent ae) {
        paddle.hide();
        paddle.move();
        paddle.draw();

        for (int i = 0; i < figList.getSize(); i++) {
            PFigure pFigure = figList.get(i);

            pFigure.hide();
            pFigure.move();
            pFigure.draw();

            figList.add(brickList.collisionCheck(pFigure));
            paddle.collisionCheck(pFigure);

            if (pFigure instanceof Missile) {
                if (((Missile) pFigure).getShouldDie()) {
                    figList.delete(pFigure);
                    pFigure.hide();
                }
            }

            figList.crop();
        }

        brickList.draw();

        Graphics g = panel.getGraphics();

        g.setColor(panel.getBackground());
        g.fillRect(0, 0, 40, 20);

        g.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 20));
        g.setColor(new Color(0, 0, 0));
        g.drawString(String.valueOf(Missile.counter), 10, 20);
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new java.awt.Panel();

        setLayout(null);

        panel.setBackground(new java.awt.Color(150, 150, 150));
        panel.setPreferredSize(new java.awt.Dimension(800, 500));
        panel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                panelKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                panelKeyReleased(evt);
            }
        });
        add(panel);
        panel.setBounds(0, 0, 800, 500);
    }// </editor-fold>//GEN-END:initComponents

    private void panelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_panelKeyPressed
        // TODO add your handling code here:
        switch (evt.getKeyCode()) {
            case 38:
                moveTimer.setDelay(moveTimer.getDelay() - 1);
                break;

            case 40:
                moveTimer.setDelay(moveTimer.getDelay() + 1);
                break;
                
            case 37:
                paddle.setTravellingLeft(true);
                break;
            case 39:
                paddle.setTravellingRight(true);
                break;
            case 67:
                paddle.hide();
                Missile.angle -= 10;

                if (Missile.angle < 45) {
                    Missile.angle = 45;
                }
                paddle.draw();
                break;
            case 86:
                paddle.hide();

                Missile.angle += 10;

                if (Missile.angle > 135) {
                    Missile.angle = 135;
                }

                paddle.draw();
                break;
            case 32:
                if (paddle.getFiringmissile() && !figList.hasMissile() && Missile.counter > 0) {
                    figList.add(paddle.shootMissile(Missile.angle));
                    Missile.counter--;
                }

                paddle.toggleFIREMISSILE();
                break;
            default:
                break;
        }
    }//GEN-LAST:event_panelKeyPressed

    private void panelKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_panelKeyReleased
        switch(evt.getKeyCode()) {
            case 37:
                paddle.setTravellingLeft(false);
                break;
            case 39:
                paddle.setTravellingRight(false);
                break;
        }
    }//GEN-LAST:event_panelKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Panel panel;
    // End of variables declaration//GEN-END:variables
}
